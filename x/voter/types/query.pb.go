// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: voter/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetRequestAttendanceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRequestAttendanceRequest) Reset()         { *m = QueryGetRequestAttendanceRequest{} }
func (m *QueryGetRequestAttendanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRequestAttendanceRequest) ProtoMessage()    {}
func (*QueryGetRequestAttendanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{0}
}
func (m *QueryGetRequestAttendanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRequestAttendanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRequestAttendanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRequestAttendanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRequestAttendanceRequest.Merge(m, src)
}
func (m *QueryGetRequestAttendanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRequestAttendanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRequestAttendanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRequestAttendanceRequest proto.InternalMessageInfo

func (m *QueryGetRequestAttendanceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRequestAttendanceResponse struct {
	RequestAttendance *RequestAttendance `protobuf:"bytes,1,opt,name=RequestAttendance,proto3" json:"RequestAttendance,omitempty"`
}

func (m *QueryGetRequestAttendanceResponse) Reset()         { *m = QueryGetRequestAttendanceResponse{} }
func (m *QueryGetRequestAttendanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRequestAttendanceResponse) ProtoMessage()    {}
func (*QueryGetRequestAttendanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{1}
}
func (m *QueryGetRequestAttendanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRequestAttendanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRequestAttendanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRequestAttendanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRequestAttendanceResponse.Merge(m, src)
}
func (m *QueryGetRequestAttendanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRequestAttendanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRequestAttendanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRequestAttendanceResponse proto.InternalMessageInfo

func (m *QueryGetRequestAttendanceResponse) GetRequestAttendance() *RequestAttendance {
	if m != nil {
		return m.RequestAttendance
	}
	return nil
}

type QueryAllRequestAttendanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRequestAttendanceRequest) Reset()         { *m = QueryAllRequestAttendanceRequest{} }
func (m *QueryAllRequestAttendanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRequestAttendanceRequest) ProtoMessage()    {}
func (*QueryAllRequestAttendanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{2}
}
func (m *QueryAllRequestAttendanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRequestAttendanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRequestAttendanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRequestAttendanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRequestAttendanceRequest.Merge(m, src)
}
func (m *QueryAllRequestAttendanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRequestAttendanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRequestAttendanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRequestAttendanceRequest proto.InternalMessageInfo

func (m *QueryAllRequestAttendanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRequestAttendanceResponse struct {
	RequestAttendance []*RequestAttendance `protobuf:"bytes,1,rep,name=RequestAttendance,proto3" json:"RequestAttendance,omitempty"`
	Pagination        *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRequestAttendanceResponse) Reset()         { *m = QueryAllRequestAttendanceResponse{} }
func (m *QueryAllRequestAttendanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRequestAttendanceResponse) ProtoMessage()    {}
func (*QueryAllRequestAttendanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{3}
}
func (m *QueryAllRequestAttendanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRequestAttendanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRequestAttendanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRequestAttendanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRequestAttendanceResponse.Merge(m, src)
}
func (m *QueryAllRequestAttendanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRequestAttendanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRequestAttendanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRequestAttendanceResponse proto.InternalMessageInfo

func (m *QueryAllRequestAttendanceResponse) GetRequestAttendance() []*RequestAttendance {
	if m != nil {
		return m.RequestAttendance
	}
	return nil
}

func (m *QueryAllRequestAttendanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInformationRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetInformationRequest) Reset()         { *m = QueryGetInformationRequest{} }
func (m *QueryGetInformationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInformationRequest) ProtoMessage()    {}
func (*QueryGetInformationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{4}
}
func (m *QueryGetInformationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInformationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInformationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInformationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInformationRequest.Merge(m, src)
}
func (m *QueryGetInformationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInformationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInformationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInformationRequest proto.InternalMessageInfo

func (m *QueryGetInformationRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetInformationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetInformationResponse struct {
	Information *Information `protobuf:"bytes,1,opt,name=Information,proto3" json:"Information,omitempty"`
}

func (m *QueryGetInformationResponse) Reset()         { *m = QueryGetInformationResponse{} }
func (m *QueryGetInformationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInformationResponse) ProtoMessage()    {}
func (*QueryGetInformationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{5}
}
func (m *QueryGetInformationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInformationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInformationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInformationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInformationResponse.Merge(m, src)
}
func (m *QueryGetInformationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInformationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInformationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInformationResponse proto.InternalMessageInfo

func (m *QueryGetInformationResponse) GetInformation() *Information {
	if m != nil {
		return m.Information
	}
	return nil
}

type QueryAllInformationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInformationRequest) Reset()         { *m = QueryAllInformationRequest{} }
func (m *QueryAllInformationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInformationRequest) ProtoMessage()    {}
func (*QueryAllInformationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{6}
}
func (m *QueryAllInformationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInformationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInformationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInformationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInformationRequest.Merge(m, src)
}
func (m *QueryAllInformationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInformationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInformationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInformationRequest proto.InternalMessageInfo

func (m *QueryAllInformationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInformationResponse struct {
	Information []*Information      `protobuf:"bytes,1,rep,name=Information,proto3" json:"Information,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInformationResponse) Reset()         { *m = QueryAllInformationResponse{} }
func (m *QueryAllInformationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInformationResponse) ProtoMessage()    {}
func (*QueryAllInformationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{7}
}
func (m *QueryAllInformationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInformationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInformationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInformationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInformationResponse.Merge(m, src)
}
func (m *QueryAllInformationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInformationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInformationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInformationResponse proto.InternalMessageInfo

func (m *QueryAllInformationResponse) GetInformation() []*Information {
	if m != nil {
		return m.Information
	}
	return nil
}

func (m *QueryAllInformationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAttendanceRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAttendanceRequest) Reset()         { *m = QueryGetAttendanceRequest{} }
func (m *QueryGetAttendanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttendanceRequest) ProtoMessage()    {}
func (*QueryGetAttendanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{8}
}
func (m *QueryGetAttendanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttendanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttendanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttendanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttendanceRequest.Merge(m, src)
}
func (m *QueryGetAttendanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttendanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttendanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttendanceRequest proto.InternalMessageInfo

func (m *QueryGetAttendanceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAttendanceResponse struct {
	Attendance *Attendance `protobuf:"bytes,1,opt,name=Attendance,proto3" json:"Attendance,omitempty"`
}

func (m *QueryGetAttendanceResponse) Reset()         { *m = QueryGetAttendanceResponse{} }
func (m *QueryGetAttendanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttendanceResponse) ProtoMessage()    {}
func (*QueryGetAttendanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{9}
}
func (m *QueryGetAttendanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttendanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttendanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttendanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttendanceResponse.Merge(m, src)
}
func (m *QueryGetAttendanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttendanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttendanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttendanceResponse proto.InternalMessageInfo

func (m *QueryGetAttendanceResponse) GetAttendance() *Attendance {
	if m != nil {
		return m.Attendance
	}
	return nil
}

type QueryAllAttendanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttendanceRequest) Reset()         { *m = QueryAllAttendanceRequest{} }
func (m *QueryAllAttendanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttendanceRequest) ProtoMessage()    {}
func (*QueryAllAttendanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{10}
}
func (m *QueryAllAttendanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttendanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttendanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttendanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttendanceRequest.Merge(m, src)
}
func (m *QueryAllAttendanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttendanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttendanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttendanceRequest proto.InternalMessageInfo

func (m *QueryAllAttendanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAttendanceResponse struct {
	Attendance []*Attendance       `protobuf:"bytes,1,rep,name=Attendance,proto3" json:"Attendance,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttendanceResponse) Reset()         { *m = QueryAllAttendanceResponse{} }
func (m *QueryAllAttendanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttendanceResponse) ProtoMessage()    {}
func (*QueryAllAttendanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c932a2c3a8f1e22, []int{11}
}
func (m *QueryAllAttendanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttendanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttendanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttendanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttendanceResponse.Merge(m, src)
}
func (m *QueryAllAttendanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttendanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttendanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttendanceResponse proto.InternalMessageInfo

func (m *QueryAllAttendanceResponse) GetAttendance() []*Attendance {
	if m != nil {
		return m.Attendance
	}
	return nil
}

func (m *QueryAllAttendanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetRequestAttendanceRequest)(nil), "username.voter.voter.QueryGetRequestAttendanceRequest")
	proto.RegisterType((*QueryGetRequestAttendanceResponse)(nil), "username.voter.voter.QueryGetRequestAttendanceResponse")
	proto.RegisterType((*QueryAllRequestAttendanceRequest)(nil), "username.voter.voter.QueryAllRequestAttendanceRequest")
	proto.RegisterType((*QueryAllRequestAttendanceResponse)(nil), "username.voter.voter.QueryAllRequestAttendanceResponse")
	proto.RegisterType((*QueryGetInformationRequest)(nil), "username.voter.voter.QueryGetInformationRequest")
	proto.RegisterType((*QueryGetInformationResponse)(nil), "username.voter.voter.QueryGetInformationResponse")
	proto.RegisterType((*QueryAllInformationRequest)(nil), "username.voter.voter.QueryAllInformationRequest")
	proto.RegisterType((*QueryAllInformationResponse)(nil), "username.voter.voter.QueryAllInformationResponse")
	proto.RegisterType((*QueryGetAttendanceRequest)(nil), "username.voter.voter.QueryGetAttendanceRequest")
	proto.RegisterType((*QueryGetAttendanceResponse)(nil), "username.voter.voter.QueryGetAttendanceResponse")
	proto.RegisterType((*QueryAllAttendanceRequest)(nil), "username.voter.voter.QueryAllAttendanceRequest")
	proto.RegisterType((*QueryAllAttendanceResponse)(nil), "username.voter.voter.QueryAllAttendanceResponse")
}

func init() { proto.RegisterFile("voter/query.proto", fileDescriptor_3c932a2c3a8f1e22) }

var fileDescriptor_3c932a2c3a8f1e22 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xeb, 0x84, 0xbf, 0xae, 0xa8, 0x54, 0xab, 0x82, 0x12, 0xe0, 0x94, 0x1c, 0xa2, 0x49,
	0xf9, 0x63, 0x27, 0x01, 0xc1, 0xca, 0x81, 0xd4, 0x8a, 0x0d, 0x22, 0xb1, 0x30, 0x20, 0x39, 0x89,
	0x09, 0x87, 0x2e, 0xe7, 0xf4, 0xce, 0xa9, 0x28, 0x88, 0x85, 0x85, 0x15, 0x89, 0x15, 0x21, 0xc4,
	0xc2, 0xc0, 0x17, 0x40, 0xac, 0x2c, 0x8c, 0x95, 0x58, 0x18, 0x51, 0xc2, 0x07, 0x41, 0xb1, 0x7d,
	0xca, 0x25, 0xe7, 0x5c, 0x72, 0x22, 0x2c, 0xad, 0x7a, 0xbe, 0xe7, 0xf5, 0xef, 0x79, 0x5e, 0xfb,
	0xbd, 0xc2, 0xf5, 0x7d, 0x2e, 0x58, 0x40, 0xf6, 0xfa, 0x2c, 0x38, 0xc0, 0xbd, 0x80, 0x0b, 0x8e,
	0x36, 0xfa, 0x21, 0x0b, 0x7c, 0xda, 0x65, 0x58, 0xae, 0xa9, 0x9f, 0x85, 0xf3, 0x1d, 0xce, 0x3b,
	0x1e, 0x23, 0xb4, 0xe7, 0x12, 0xea, 0xfb, 0x5c, 0x50, 0xe1, 0x72, 0x3f, 0x54, 0x9a, 0xc2, 0xe5,
	0x16, 0x0f, 0xbb, 0x3c, 0x24, 0x4d, 0x1a, 0x32, 0x55, 0x8c, 0xec, 0xd7, 0x9a, 0x4c, 0xd0, 0x1a,
	0xe9, 0xd1, 0x8e, 0xeb, 0xcb, 0x97, 0xf5, 0xbb, 0x17, 0xd4, 0x96, 0x0d, 0xb6, 0xd7, 0x67, 0xa1,
	0x70, 0x84, 0x60, 0x7e, 0x9b, 0xfa, 0x2d, 0xa6, 0x97, 0xcf, 0xa8, 0x65, 0xd7, 0x7f, 0xc2, 0x83,
	0x6e, 0x5c, 0x77, 0x5a, 0x2d, 0xd0, 0x29, 0x81, 0x5d, 0x87, 0xc5, 0x07, 0xa3, 0x1d, 0x77, 0x99,
	0x48, 0xd4, 0xd4, 0x0f, 0xd0, 0x1a, 0xcc, 0xb9, 0xed, 0x4d, 0x50, 0x04, 0x95, 0x23, 0x8d, 0x9c,
	0xdb, 0xb6, 0x5f, 0xc0, 0x52, 0x8a, 0x26, 0xec, 0x71, 0x3f, 0x64, 0xe8, 0x21, 0x5c, 0x4f, 0x2c,
	0xca, 0x1a, 0xab, 0xf5, 0x32, 0x36, 0x85, 0x84, 0x93, 0xb5, 0x92, 0x15, 0xec, 0x67, 0x9a, 0xd7,
	0xf1, 0xbc, 0x99, 0xbc, 0x3b, 0x10, 0x8e, 0x73, 0xd3, 0x7b, 0x6e, 0x61, 0x15, 0x32, 0x1e, 0x85,
	0x8c, 0x55, 0xc7, 0x74, 0xc8, 0xf8, 0x3e, 0xed, 0x44, 0xda, 0x46, 0x4c, 0x69, 0x7f, 0x07, 0xda,
	0xa8, 0x79, 0xb3, 0x74, 0xa3, 0xf9, 0x7f, 0x33, 0x8a, 0x76, 0x27, 0x4c, 0xe4, 0x74, 0x70, 0xf3,
	0x4c, 0x28, 0xa6, 0x09, 0x17, 0x3b, 0xb0, 0x10, 0x75, 0xeb, 0xde, 0xf8, 0x58, 0x44, 0x59, 0x6d,
	0xc2, 0xe3, 0xad, 0x80, 0x51, 0xc1, 0x03, 0x19, 0xd4, 0xc9, 0x46, 0xf4, 0xa7, 0xee, 0xfa, 0x68,
	0xe3, 0xbc, 0xec, 0x7a, 0x13, 0x9e, 0x33, 0xd6, 0xd1, 0x31, 0xdc, 0x85, 0xab, 0xb1, 0xc7, 0x3a,
	0xf5, 0x92, 0x39, 0x80, 0xb8, 0x3e, 0xae, 0xb2, 0xdb, 0x9a, 0xd5, 0xf1, 0x3c, 0x03, 0xeb, 0xb2,
	0xfa, 0xfa, 0x05, 0x68, 0x2b, 0xd3, 0xdb, 0xcc, 0xb2, 0x92, 0xcf, 0x6e, 0x65, 0x79, 0xfd, 0xbb,
	0x02, 0xcf, 0x46, 0xb9, 0xcf, 0xbf, 0x9a, 0x8f, 0xc7, 0xcd, 0x36, 0x1c, 0xd5, 0xdb, 0x10, 0x26,
	0x2e, 0x63, 0xd1, 0xec, 0x2b, 0xa6, 0x8e, 0x69, 0xec, 0x96, 0x86, 0x71, 0x3c, 0xef, 0xff, 0xdd,
	0xbb, 0xcf, 0x60, 0x7c, 0x0c, 0x16, 0x70, 0x91, 0xcf, 0xea, 0x62, 0x69, 0xbd, 0xa9, 0xbf, 0x39,
	0x01, 0x8f, 0x4a, 0x52, 0xf4, 0x0d, 0x18, 0xc6, 0x00, 0xba, 0x69, 0xc6, 0x9a, 0x37, 0x71, 0x0b,
	0xb7, 0x32, 0xeb, 0x14, 0x9c, 0x7d, 0xe3, 0xf5, 0xcf, 0x3f, 0xef, 0x72, 0x18, 0x5d, 0x25, 0x51,
	0x01, 0xa2, 0x06, 0xff, 0x8c, 0xcf, 0x06, 0x79, 0xe9, 0xb6, 0x5f, 0xa1, 0xaf, 0x00, 0x6e, 0x24,
	0x96, 0x1c, 0xcf, 0x4b, 0xe5, 0x4f, 0x99, 0xc0, 0xa9, 0xfc, 0x69, 0xc3, 0xd4, 0x26, 0x92, 0x7f,
	0x1b, 0x95, 0x17, 0xe4, 0x47, 0x9f, 0xc0, 0xc4, 0x65, 0x45, 0xd5, 0xf4, 0xe4, 0x92, 0x53, 0xa5,
	0x50, 0xcb, 0xa0, 0xd0, 0x94, 0x58, 0x52, 0x56, 0xd0, 0x96, 0x99, 0x32, 0xf6, 0xf5, 0x55, 0xf9,
	0x7e, 0x04, 0x70, 0x2d, 0x56, 0x67, 0x94, 0x6c, 0x35, 0x3d, 0xa1, 0x8c, 0x9c, 0xe6, 0x41, 0x66,
	0x6f, 0x4b, 0xce, 0x8b, 0xa8, 0x34, 0x97, 0x13, 0x7d, 0x00, 0xf1, 0x5b, 0x85, 0x48, 0x7a, 0x28,
	0xc9, 0x8e, 0x57, 0x17, 0x17, 0x68, 0xb8, 0x6b, 0x12, 0xae, 0x8c, 0x2e, 0x99, 0xe1, 0xe8, 0xd4,
	0x19, 0x7d, 0x0f, 0xe0, 0xa9, 0xc9, 0xc3, 0x49, 0xd2, 0x03, 0xc9, 0xc6, 0x68, 0x1c, 0x35, 0x76,
	0x45, 0x32, 0xda, 0xa8, 0x38, 0x8f, 0xf1, 0x8e, 0xf3, 0x63, 0x60, 0x81, 0xc3, 0x81, 0x05, 0x7e,
	0x0f, 0x2c, 0xf0, 0x76, 0x68, 0xad, 0x1c, 0x0e, 0xad, 0x95, 0x5f, 0x43, 0x6b, 0xe5, 0x51, 0xb9,
	0xe3, 0x8a, 0xa7, 0xfd, 0x26, 0x6e, 0xf1, 0xee, 0x74, 0x95, 0xe7, 0xfa, 0xb7, 0x38, 0xe8, 0xb1,
	0xb0, 0x79, 0x4c, 0xfe, 0x47, 0x76, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x4d, 0x75,
	0x1e, 0x56, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	RequestAttendance(ctx context.Context, in *QueryGetRequestAttendanceRequest, opts ...grpc.CallOption) (*QueryGetRequestAttendanceResponse, error)
	RequestAttendanceAll(ctx context.Context, in *QueryAllRequestAttendanceRequest, opts ...grpc.CallOption) (*QueryAllRequestAttendanceResponse, error)
	Information(ctx context.Context, in *QueryGetInformationRequest, opts ...grpc.CallOption) (*QueryGetInformationResponse, error)
	InformationAll(ctx context.Context, in *QueryAllInformationRequest, opts ...grpc.CallOption) (*QueryAllInformationResponse, error)
	Attendance(ctx context.Context, in *QueryGetAttendanceRequest, opts ...grpc.CallOption) (*QueryGetAttendanceResponse, error)
	AttendanceAll(ctx context.Context, in *QueryAllAttendanceRequest, opts ...grpc.CallOption) (*QueryAllAttendanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RequestAttendance(ctx context.Context, in *QueryGetRequestAttendanceRequest, opts ...grpc.CallOption) (*QueryGetRequestAttendanceResponse, error) {
	out := new(QueryGetRequestAttendanceResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/RequestAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestAttendanceAll(ctx context.Context, in *QueryAllRequestAttendanceRequest, opts ...grpc.CallOption) (*QueryAllRequestAttendanceResponse, error) {
	out := new(QueryAllRequestAttendanceResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/RequestAttendanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Information(ctx context.Context, in *QueryGetInformationRequest, opts ...grpc.CallOption) (*QueryGetInformationResponse, error) {
	out := new(QueryGetInformationResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/Information", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InformationAll(ctx context.Context, in *QueryAllInformationRequest, opts ...grpc.CallOption) (*QueryAllInformationResponse, error) {
	out := new(QueryAllInformationResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/InformationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attendance(ctx context.Context, in *QueryGetAttendanceRequest, opts ...grpc.CallOption) (*QueryGetAttendanceResponse, error) {
	out := new(QueryGetAttendanceResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/Attendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttendanceAll(ctx context.Context, in *QueryAllAttendanceRequest, opts ...grpc.CallOption) (*QueryAllAttendanceResponse, error) {
	out := new(QueryAllAttendanceResponse)
	err := c.cc.Invoke(ctx, "/username.voter.voter.Query/AttendanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	RequestAttendance(context.Context, *QueryGetRequestAttendanceRequest) (*QueryGetRequestAttendanceResponse, error)
	RequestAttendanceAll(context.Context, *QueryAllRequestAttendanceRequest) (*QueryAllRequestAttendanceResponse, error)
	Information(context.Context, *QueryGetInformationRequest) (*QueryGetInformationResponse, error)
	InformationAll(context.Context, *QueryAllInformationRequest) (*QueryAllInformationResponse, error)
	Attendance(context.Context, *QueryGetAttendanceRequest) (*QueryGetAttendanceResponse, error)
	AttendanceAll(context.Context, *QueryAllAttendanceRequest) (*QueryAllAttendanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RequestAttendance(ctx context.Context, req *QueryGetRequestAttendanceRequest) (*QueryGetRequestAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAttendance not implemented")
}
func (*UnimplementedQueryServer) RequestAttendanceAll(ctx context.Context, req *QueryAllRequestAttendanceRequest) (*QueryAllRequestAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAttendanceAll not implemented")
}
func (*UnimplementedQueryServer) Information(ctx context.Context, req *QueryGetInformationRequest) (*QueryGetInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Information not implemented")
}
func (*UnimplementedQueryServer) InformationAll(ctx context.Context, req *QueryAllInformationRequest) (*QueryAllInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationAll not implemented")
}
func (*UnimplementedQueryServer) Attendance(ctx context.Context, req *QueryGetAttendanceRequest) (*QueryGetAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attendance not implemented")
}
func (*UnimplementedQueryServer) AttendanceAll(ctx context.Context, req *QueryAllAttendanceRequest) (*QueryAllAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttendanceAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RequestAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRequestAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/RequestAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestAttendance(ctx, req.(*QueryGetRequestAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestAttendanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRequestAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestAttendanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/RequestAttendanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestAttendanceAll(ctx, req.(*QueryAllRequestAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Information_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Information(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/Information",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Information(ctx, req.(*QueryGetInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InformationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InformationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/InformationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InformationAll(ctx, req.(*QueryAllInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/Attendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attendance(ctx, req.(*QueryGetAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttendanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttendanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/username.voter.voter.Query/AttendanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttendanceAll(ctx, req.(*QueryAllAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "username.voter.voter.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAttendance",
			Handler:    _Query_RequestAttendance_Handler,
		},
		{
			MethodName: "RequestAttendanceAll",
			Handler:    _Query_RequestAttendanceAll_Handler,
		},
		{
			MethodName: "Information",
			Handler:    _Query_Information_Handler,
		},
		{
			MethodName: "InformationAll",
			Handler:    _Query_InformationAll_Handler,
		},
		{
			MethodName: "Attendance",
			Handler:    _Query_Attendance_Handler,
		},
		{
			MethodName: "AttendanceAll",
			Handler:    _Query_AttendanceAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voter/query.proto",
}

func (m *QueryGetRequestAttendanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRequestAttendanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRequestAttendanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRequestAttendanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRequestAttendanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRequestAttendanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestAttendance != nil {
		{
			size, err := m.RequestAttendance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRequestAttendanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRequestAttendanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRequestAttendanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRequestAttendanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRequestAttendanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRequestAttendanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestAttendance) > 0 {
		for iNdEx := len(m.RequestAttendance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestAttendance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInformationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInformationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInformationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInformationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInformationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInformationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Information != nil {
		{
			size, err := m.Information.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInformationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInformationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInformationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInformationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInformationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInformationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Information) > 0 {
		for iNdEx := len(m.Information) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Information[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttendanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttendanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttendanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttendanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttendanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttendanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attendance != nil {
		{
			size, err := m.Attendance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttendanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttendanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttendanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttendanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttendanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttendanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attendance) > 0 {
		for iNdEx := len(m.Attendance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attendance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetRequestAttendanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRequestAttendanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestAttendance != nil {
		l = m.RequestAttendance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRequestAttendanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRequestAttendanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestAttendance) > 0 {
		for _, e := range m.RequestAttendance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInformationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetInformationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Information != nil {
		l = m.Information.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInformationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInformationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Information) > 0 {
		for _, e := range m.Information {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttendanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAttendanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attendance != nil {
		l = m.Attendance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttendanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttendanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attendance) > 0 {
		for _, e := range m.Attendance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetRequestAttendanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRequestAttendanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRequestAttendanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRequestAttendanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRequestAttendanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRequestAttendanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAttendance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestAttendance == nil {
				m.RequestAttendance = &RequestAttendance{}
			}
			if err := m.RequestAttendance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRequestAttendanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRequestAttendanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRequestAttendanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRequestAttendanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRequestAttendanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRequestAttendanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestAttendance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestAttendance = append(m.RequestAttendance, &RequestAttendance{})
			if err := m.RequestAttendance[len(m.RequestAttendance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInformationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInformationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInformationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInformationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInformationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInformationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Information == nil {
				m.Information = &Information{}
			}
			if err := m.Information.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInformationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInformationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInformationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInformationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInformationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInformationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Information = append(m.Information, &Information{})
			if err := m.Information[len(m.Information)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttendanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttendanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttendanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttendanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttendanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttendanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attendance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attendance == nil {
				m.Attendance = &Attendance{}
			}
			if err := m.Attendance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttendanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttendanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttendanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttendanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttendanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttendanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attendance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attendance = append(m.Attendance, &Attendance{})
			if err := m.Attendance[len(m.Attendance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
